{"version":3,"sources":["Countries.js","States.js","AutoCompletedText.js","App.js","serviceWorker.js","index.js"],"names":["split","AutoCompletedText","props","onTextChange","e","value","target","suggestions","suggestions1","length","regex","RegExp","countries","sort","filter","v","test","states","setState","text","renderSuggestions","state","map","item","index","key","onClick","selectedText","this","id","type","onChange","React","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iNAAe,4/DAoMLA,MAAM,MCpMD,gyBAwEFA,MAAM,MCnEEC,G,uDAEjB,WAAYC,GAAO,IAAD,8BACd,cAAMA,IASVC,aAAe,SAACC,GACZ,IAAMC,EAAQD,EAAEE,OAAOD,MACnBE,EAAc,GACdC,EAAe,GACnB,GAAGH,EAAMI,OAAS,EAAE,CAChB,IAAMC,EAAQ,IAAIC,OAAJ,WAAeN,GAAS,KACtCE,EAAcK,EAAUC,OAAOC,QAAO,SAAAC,GAAC,OAAIL,EAAMM,KAAKD,MACtDP,EAAeS,EAAOJ,OAAOC,QAAO,SAAAC,GAAC,OAAIL,EAAMM,KAAKD,MAGxD,EAAKG,UAAS,iBAAO,CACjBX,cAAYC,eACZW,KAAMd,OAtBI,EAkClBe,kBAAoB,WAAO,IACjBb,EAAgB,EAAKc,MAArBd,YACDC,EAAiB,EAAKa,MAAtBb,aACL,OAA0B,IAAvBD,EAAYE,QAAwC,IAAxBD,EAAaC,OACjC,KAIP,4BAEQF,EAAYe,KAAI,SAACC,EAAMC,GAAP,OAAkB,wBAAIC,IAAKD,EAAOE,QAAS,kBAAM,EAAKC,aAAaJ,KAAQA,MAK/Ff,EAAac,KAAI,SAACC,EAAMC,GAAP,OAAkB,wBAAIC,IAAKD,EAAOE,QAAS,kBAAM,EAAKC,aAAaJ,KAAQA,QA/CpG,EAAKF,MAAQ,CAETd,YAAa,GACbC,aAAa,GACbW,KAAM,IANI,E,yDA0BLd,GACTuB,KAAKV,UAAS,iBAAO,CACjBC,KAAMd,EACNE,YAAa,GACbC,aAAc,S,+BA2BZ,IAAD,EACsCoB,KAAKP,MAAxCF,EADH,EACGA,KAAMZ,EADT,EACSA,YAAYC,EADrB,EACqBA,aAC1B,OAEK,yBAAKqB,GAAG,aACL,6DAAkC,gDAAlC,kBACA,2BAAOA,GAAG,QAAQC,KAAK,OAAOC,SAAUH,KAAKzB,aAAcE,MAAOc,IAEjES,KAAKR,oBACN,6BACA,6BAAS,6BACT,6BACA,sDAA4Bb,EAAYE,OAAO,6BAAS,6BAAxD,gCAC+BD,EAAaC,a,GAxEbuB,IAAMC,YCStCC,E,uKARX,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,W,GAJUF,aCQEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.7a67a0f1.chunk.js","sourcesContent":["export default `\r\nAfghanistan\r\nAlbania\r\nAlgeria\r\nAndorra\r\nAngola\r\nAntigua & Deps\r\nArgentina\r\nArmenia\r\nAustralia\r\nAustria\r\nAzerbaijan\r\nBahamas\r\nBahrain\r\nBangladesh\r\nBarbados\r\nBelarus\r\nBelgium\r\nBelize\r\nBenin\r\nBhutan\r\nBolivia\r\nBosnia Herzegovina\r\nBotswana\r\nBrazil\r\nBrunei\r\nBulgaria\r\nBurkina\r\nBurundi\r\nCambodia\r\nCameroon\r\nCanada\r\nCape Verde\r\nCentral African Rep\r\nChad\r\nChile\r\nChina\r\nColombia\r\nComoros\r\nCongo\r\nCongo {Democratic Rep}\r\nCosta Rica\r\nCroatia\r\nCuba\r\nCyprus\r\nCzech Republic\r\nDenmark\r\nDjibouti\r\nDominica\r\nDominican Republic\r\nEast Timor\r\nEcuador\r\nEgypt\r\nEl Salvador\r\nEquatorial Guinea\r\nEritrea\r\nEstonia\r\nEthiopia\r\nFiji\r\nFinland\r\nFrance\r\nGabon\r\nGambia\r\nGeorgia\r\nGermany\r\nGhana\r\nGreece\r\nGrenada\r\nGuatemala\r\nGuinea\r\nGuinea-Bissau\r\nGuyana\r\nHaiti\r\nHonduras\r\nHungary\r\nIceland\r\nIndia\r\nIndonesia\r\nIran\r\nIraq\r\nIreland {Republic}\r\nIsrael\r\nItaly\r\nIvory Coast\r\nJamaica\r\nJapan\r\nJordan\r\nKazakhstan\r\nKenya\r\nKiribati\r\nKorea North\r\nKorea South\r\nKosovo\r\nKuwait\r\nKyrgyzstan\r\nLaos\r\nLatvia\r\nLebanon\r\nLesotho\r\nLiberia\r\nLibya\r\nLiechtenstein\r\nLithuania\r\nLuxembourg\r\nMacedonia\r\nMadagascar\r\nMalawi\r\nMalaysia\r\nMaldives\r\nMali\r\nMalta\r\nMarshall Islands\r\nMauritania\r\nMauritius\r\nMexico\r\nMicronesia\r\nMoldova\r\nMonaco\r\nMongolia\r\nMontenegro\r\nMorocco\r\nMozambique\r\nMyanmar, {Burma}\r\nNamibia\r\nNauru\r\nNepal\r\nNetherlands\r\nNew Zealand\r\nNicaragua\r\nNiger\r\nNigeria\r\nNorway\r\nOman\r\nPakistan\r\nPalau\r\nPanama\r\nPapua New Guinea\r\nParaguay\r\nPeru\r\nPhilippines\r\nPoland\r\nPortugal\r\nQatar\r\nRomania\r\nRussian Federation\r\nRwanda\r\nSt Kitts & Nevis\r\nSt Lucia\r\nSaint Vincent & the Grenadines\r\nSamoa\r\nSan Marino\r\nSao Tome & Principe\r\nSaudi Arabia\r\nSenegal\r\nSerbia\r\nSeychelles\r\nSierra Leone\r\nSingapore\r\nSlovakia\r\nSlovenia\r\nSolomon Islands\r\nSomalia\r\nSouth Africa\r\nSouth Sudan\r\nSpain\r\nSri Lanka\r\nSudan\r\nSuriname\r\nSwaziland\r\nSweden\r\nSwitzerland\r\nSyria\r\nTaiwan\r\nTajikistan\r\nTanzania\r\nThailand\r\nTogo\r\nTonga\r\nTrinidad & Tobago\r\nTunisia\r\nTurkey\r\nTurkmenistan\r\nTuvalu\r\nUganda\r\nUkraine\r\nUnited Arab Emirates\r\nUnited Kingdom\r\nUnited States\r\nUruguay\r\nUzbekistan\r\nVanuatu\r\nVatican City\r\nVenezuela\r\nVietnam\r\nYemen\r\nZambia\r\nZimbabwe`.split('\\n')","export default `\r\nAndra Pradesh\r\nHyderabad\r\nAmaravati\r\nArunachal Pradesh\r\nItangar\r\nAssam\r\nDispur\r\nBihar\r\nPatna\r\nChhattisgarh\r\nRaipur\r\nGoa\r\nPanaji\r\nGujarat\r\nGandhinagar\r\nHaryana\r\nChandigarh\r\nHimachal Pradesh\r\nShimla\r\nJammu and Kashmir\r\nSrinagar and Jammu\r\nJharkhand\r\nRanchi\r\nKarnataka\r\nBangalore\r\nKerala\r\nMadya Pradesh\r\nBhopal\r\nMaharashtra\r\nMumbai\r\nManipur\r\nImphal\r\nMeghalaya\r\nShillong\r\nMizoram\r\nAizawi\r\nNagaland\r\nKohima\r\nOrissa\r\nBhubaneshwar\r\nPunjab\r\nChandigarh\r\nRajasthan\r\nJaipur\r\nSikkim\r\nGangtok\r\nTamil Nadu\r\nChennai\r\nTelagana\r\nHyderabad\r\nTripura\r\nAgartala\r\nUttaranchal\r\nDehradun\r\nUttar Pradesh\r\nLucknow\r\nWest Bengal\r\nKolkata\r\nAndaman and Nicobar Islands\r\nPort Blair\r\nChandigarh\r\nChandigarh\r\nDadar and Nagar Haveli\r\nSilvassa\r\nDaman and Diu\r\nDaman\r\nDelhi\r\nDelhi\r\nLakshadeep\r\nKavaratti\r\nPondicherry\r\nPondicherry`.split('\\n')","import React from 'react';\r\nimport countries from './Countries';\r\nimport states from './States';\r\nimport './App.css';\r\n\r\nexport default class AutoCompletedText extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            \r\n            suggestions: [],\r\n            suggestions1:[],\r\n            text: ''\r\n        }\r\n    }\r\n\r\n    onTextChange = (e) => {\r\n        const value = e.target.value;\r\n        let suggestions = [];\r\n        let suggestions1 = [];\r\n        if(value.length > 0){\r\n            const regex = new RegExp(`^${value}`, 'i');\r\n            suggestions = countries.sort().filter(v => regex.test(v))\r\n            suggestions1 = states.sort().filter(v => regex.test(v))\r\n        }\r\n\r\n        this.setState(() => ({\r\n            suggestions,suggestions1,\r\n            text: value\r\n        }))\r\n    }\r\n\r\n    selectedText(value) {\r\n        this.setState(() => ({\r\n            text: value,\r\n            suggestions: [],\r\n            suggestions1: [],\r\n        }))\r\n    }\r\n\r\n    renderSuggestions = () => {\r\n        let { suggestions } = this.state;\r\n        let {suggestions1 } = this.state;\r\n        if(suggestions.length === 0 || suggestions1.length === 0){\r\n            return null;\r\n        }\r\n        else{\r\n        return (\r\n            <ul >\r\n                {\r\n                    suggestions.map((item, index) => (<li key={index} onClick={() => this.selectedText(item)}>{item}</li>))\r\n                }\r\n\r\n            \r\n            {\r\n                suggestions1.map((item, index) => (<li key={index} onClick={() => this.selectedText(item)}>{item}</li>))\r\n            }\r\n\r\n        </ul>\r\n        );\r\n        }\r\n    }\r\n    \r\n    render() {\r\n        const { text, suggestions,suggestions1 } = this.state;\r\n        return(\r\n            \r\n             <div id=\"notebooks\">\r\n                <h2>Countries and States of India <strong>First Letter</strong> Auto Complete</h2>\r\n                <input id=\"query\" type=\"text\" onChange={this.onTextChange} value={text}/>\r\n                \r\n                {this.renderSuggestions()}\r\n                <br></br>\r\n                <br></br><br></br>\r\n                <br></br>\r\n                <span>Country Suggestions: {suggestions.length}<br></br><br></br>\r\n                 States of India Suggestions: {suggestions1.length}</span>\r\n             </div>\r\n            \r\n        );\r\n    }\r\n\r\n}","import React, { Component } from 'react';\nimport AutoCompletedText from './AutoCompletedText';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <AutoCompletedText />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}